"JSX"

import React, { createContext, useContext, useReducer } from 'react';

// Context
const CartContext = createContext();

// Initial state for the cart
const initialState = {
  cartItems: [],
  totalQuantity: 0,
  totalAmount: 0,
};

// Reducer function to handle state changes
const cartReducer = (state, action) => {
  switch (action.type) {
    case 'ADD_TO_CART':
      return addToCart(state, action.payload);
    case 'REMOVE_FROM_CART':
      return removeFromCart(state, action.payload);
    case 'INCREMENT_QUANTITY':
      return incrementQuantity(state, action.payload);
    case 'DECREMENT_QUANTITY':
      return decrementQuantity(state, action.payload);
    default:
      return state;
  }
};

// Helper function to add item to the cart
const addToCart = (state, product) => {
  const existingItemIndex = state.cartItems.findIndex(item => item.id === product.id);

  if (existingItemIndex !== -1) {
    // Item already exists, update quantity
    const updatedCartItems = [...state.cartItems];
    updatedCartItems[existingItemIndex].quantity += 1;

    return calculateTotals(updatedCartItems);
  } else {
    // Item doesn't exist, add it to the cart
    const newCartItem = { ...product, quantity: 1 };
    const updatedCartItems = [...state.cartItems, newCartItem];

    return calculateTotals(updatedCartItems);
  }
};

// Helper function to remove item from the cart
const removeFromCart = (state, productId) => {
  const updatedCartItems = state.cartItems.filter(item => item.id !== productId);
  return calculateTotals(updatedCartItems);
};

// Helper function to increment item quantity
const incrementQuantity = (state, productId) => {
  const updatedCartItems = state.cartItems.map(item => {
    if (item.id === productId) {
      return { ...item, quantity: item.quantity + 1 };
    }
    return item;
  });
  return calculateTotals(updatedCartItems);
};

// Helper function to decrement item quantity
const decrementQuantity = (state, productId) => {
  const updatedCartItems = state.cartItems.map(item => {
    if (item.id === productId && item.quantity > 1) {
      return { ...item, quantity: item.quantity - 1 };
    }
    return item;
  });
  return calculateTotals(updatedCartItems);
};

// Helper function to calculate total quantity and amount
const calculateTotals = cartItems => {
  const totalQuantity = cartItems.reduce((total, item) => total + item.quantity, 0);
  const totalAmount = cartItems.reduce((total, item) => total + item.price * item.quantity, 0);
  return { cartItems, totalQuantity, totalAmount };
};

// CartProvider component to wrap the entire application
export const CartProvider = ({ children }) => {
  const [state, dispatch] = useReducer(cartReducer, initialState);

  return (
    <CartContext.Provider value={{ state, dispatch }}>
      {children}
    </CartContext.Provider>
  );
};

// Custom hook to access the cart context
export const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};


"JSX"

import React from 'react';
import { CartProvider, useCart } from './CartContext';

const CartPage = () => {
  return (
    <CartProvider>
      <CartPageContent />
    </CartProvider>
  );
};

const CartPageContent = () => {
  const { state, dispatch } = useCart();

  const handleAddToCart = (product) => {
    dispatch({ type: 'ADD_TO_CART', payload: product });
  };

  const handleRemoveFromCart = (productId) => {
    dispatch({ type: 'REMOVE_FROM_CART', payload: productId });
  };

  const handleIncrementQuantity = (productId) => {
    dispatch({ type: 'INCREMENT_QUANTITY', payload: productId });
  };

  const handleDecrementQuantity = (productId) => {
    dispatch({ type: 'DECREMENT_QUANTITY', payload: productId });
  };

  return (
    <div>
      <h1>Cart Page</h1>
      {/* Render product list here with buttons to add/remove items */}
      {/* Display total quantity and amount */}
    </div>
  );
};

export default CartPage;
